from enum import Enum
from polars import DataFrame

class ItemFrames:
    @property
    def frame_index(self) -> list[int]: ...
    @property
    def item_id(self) -> list[int]: ...
    @property
    def state(self) -> list[int]: ...
    @property
    def orientation(self) -> list[float]: ...
    @property
    def velocity(self) -> list[tuple[float, float]]: ...
    @property
    def position(self) -> list[tuple[float, float]]: ...
    @property
    def damage_taken(self) -> list[int]: ...
    @property
    def expiration_timer(self) -> list[float]: ...
    @property
    def spawn_id(self) -> list[int]: ...
    @property
    def missile_type(self) -> list[int] | None: ...
    @property
    def turnip_type(self) -> list[int] | None: ...
    @property
    def is_launched(self) -> list[bool] | None: ...
    @property
    def charge_power(self) -> list[int] | None: ...
    @property
    def owner(self) -> list[int] | None: ...

class PreFrames:
    @property
    def frame_index(self) -> list[int]: ...
    @property
    def random_seed(self) -> list[int]: ...
    @property
    def action_state(self) -> list[int]: ...
    @property
    def position(self) -> list[tuple[float, float]]: ...
    @property
    def orientation(self) -> list[float]: ...
    @property
    def joystick(self) -> list[tuple[float, float]]: ...
    @property
    def cstick(self) -> list[tuple[float, float]]: ...
    @property
    def engine_trigger(self) -> list[float]: ...
    @property
    def engine_buttons(self) -> list[int]: ...
    @property
    def controller_buttons(self) -> list[int]: ...
    @property
    def controller_l(self) -> list[float]: ...
    @property
    def controller_r(self) -> list[float]: ...
    @property
    def percent(self) -> list[float] | None: ...

class PostFrames:
    @property
    def frame_index(self) -> list[int]: ...
    @property
    def character(self) -> list[int]: ...
    @property
    def action_state(self) -> list[int]: ...
    @property
    def position(self) -> list[tuple[float, float]]: ...
    @property
    def orientation(self) -> list[float]: ...
    @property
    def percent(self) -> list[float]: ...
    @property
    def shield_health(self) -> list[float]: ...
    @property
    def last_attack_landed(self) -> list[int]: ...
    @property
    def combo_count(self) -> list[int]: ...
    @property
    def last_hit_by(self) -> list[int]: ...
    @property
    def stocks(self) -> list[int]: ...
    @property
    def state_frame(self) -> list[float] | None: ...
    @property
    def flags(self) -> list[int] | None: ...
    @property
    def misc_as(self) -> list[float] | None: ...
    @property
    def is_grounded(self) -> list[bool] | None: ...
    @property
    def last_ground_id(self) -> list[int] | None: ...
    @property
    def jumps_remaining(self) -> list[int]: ...
    @property
    def l_cancel(self) -> list[int] | None: ...
    @property
    def hurtbox_state(self) -> list[int] | None: ...
    @property
    def air_velocity(self) -> list[tuple[float, float]] | None: ...
    @property
    def knockback_velocity(self) -> list[tuple[float, float]] | None: ...
    @property
    def ground_velocity(self) -> list[tuple[float, float]] | None: ...
    @property
    def hitlag_remaining(self) -> list[float] | None: ...
    @property
    def animation_index(self) -> list[int] | None: ...

class Frames:
    pre: PreFrames
    post: PostFrames

class Stats:
    @property
    def input(self) -> DataFrame: ...
    @property
    def l_cancel(self) -> DataFrame: ...
    @property
    def item(self) -> DataFrame: ...
    @property
    def defense(self) -> DataFrame: ...
    # @property
    # def

class Player:
    frames: Frames
    nana_frames: Frames | None
    stats: Stats
    @property
    def character(self) -> int: ...
    @property
    def costume(self) -> int: ...
    @property
    def port(self) -> int: ...
    @property
    def connect_code(self) -> str | None: ...
    @property
    def display_name(self) -> str | None: ...
    @property
    def is_winner(self) -> bool | None: ...

    def __init__(self):
        self.__character: int
        self.__costume: int
        self.__port: int
        self.__connect_code: str | None
        self.__display_name: str | None
        self.__is_winner: bool | None

class Game:
    @property
    def players(self) -> list[Player]: ...
    @property
    def random_seed(self) -> int: ...
    @property
    def is_teams(self) -> bool: ...
    @property
    def stage(self) -> int: ...
    @property
    def timer(self) -> int: ...
    @property
    def damage_ratio(self) -> float: ...
    @property
    def is_pal(self) -> bool | None: ...
    @property
    def is_frozen_stadium(self) -> bool | None: ...
    @property
    def is_netplay(self) -> bool | None: ...
    @property
    def match_id(self) -> str | None: ...
    @property
    def match_type(self) -> int | None: ...
    @property
    def game_number(self) -> int | None: ...
    @property
    def tiebreak_number(self) -> int | None: ...
    @property
    def end_method(self) -> int | None: ...
    @property
    def lras_initiator(self) -> int | None: ...
    @property
    def placements(self) -> list[int]: ...

    def __init__(self, path: str):
        self.__players: list[Player]
        self.__random_seed: int
        self.__is_teams: bool
        self.__stage: int
        self.__timer: int
        self.__damage_ratio: float
        self.__is_pal: bool | None
        self.__is_frozen_stadium: bool | None
        self.__is_netplay: bool | None
        self.__match_id: str | None
        self.__match_type: int | None
        self.__game_number: int | None
        self.__tiebreak_number: int | None
        self.__end_method: int | None
        self.__lras_initiator: int | None
        self.__placements: list[int]
    def get_port_frames(self, port: int) -> Frames: ...

class PreFrame(Enum):
    FRAME_NUMBER = 0
    RANDOM_SEED = 1
    ACTION_STATE = 2
    POSITION_X = 3
    POSITION_Y = 4
    FACING = 5
    JOYSTICK_X = 6
    JOYSTICK_Y = 7
    CSTICK_X = 8
    CSTICK_Y = 9
    TRIGGER = 10
    LOGICAL_BUTTONS = 11
    PHYSICAL_BUTTONS = 12
    PHYSICAL_L = 13
    PHYSICAL_R = 14
    PERCENT = 15
    def __str__(self) -> str: ...

def parse(path: str) -> list[Game]: ...